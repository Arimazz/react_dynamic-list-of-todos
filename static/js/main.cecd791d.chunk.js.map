{"version":3,"sources":["TodoList/TodoList.tsx","Api/Api.ts","index.tsx","App.tsx"],"names":["TodoList","todos","map","todo","id","userId","name","user","title","completed","key","className","getData","url","fetch","then","response","json","ReactDOM","render","useState","setTodos","isLoading","setIsLoading","loadTodos","a","Promise","all","todosLoaded","users","todosWithUsers","find","length","type","onClick","disabled","sort","b","localeCompare","Number","document","getElementById"],"mappings":"6PAMaA,G,MAAsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpC,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAS,IAEhBC,EAKED,EALFC,GACAC,EAIEF,EAJFE,OACQC,EAGNH,EAHFI,KAAQD,KACRE,EAEEL,EAFFK,MACAC,EACEN,EADFM,UAGF,OACE,yBAAKC,IAAKN,EAAIO,UAAU,QACtB,uBAAGA,UAAU,cAAb,OAEG,IACAP,GAEH,uBAAGO,UAAU,cAAb,UAEG,IACAN,GAEH,uBAAGM,UAAU,cAAb,QAEG,IACAL,GAEH,uBAAGK,UAAU,cAAb,QAEG,IACAH,GAEH,uBAAGG,UAAU,cAAb,aAEG,IACAF,EAAY,SAAM,iBCxC3BG,EAAU,SAAIC,GAClB,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCD/BC,IAASC,OACP,mBCAiB,WAAO,IAAD,EACGC,mBAAiB,IADpB,mBAChBnB,EADgB,KACToB,EADS,OAEWD,oBAAkB,GAF7B,mBAEhBE,EAFgB,KAELC,EAFK,KAIjBC,EAAS,uCAAG,oCAAAC,EAAA,6DAChBF,GAAa,GADG,SAEmBG,QAAQC,IAAI,CFE1Cf,EAbS,8CASTA,EARS,gDEQE,mCAETgB,EAFS,KAEIC,EAFJ,KAIVC,EAAiBF,EAAY1B,KAAI,SAAAC,GAAI,sBACtCA,EADsC,CAEzCI,KAAMsB,EAAME,MAAK,SAAAxB,GAAI,OAAIA,EAAKH,KAAOD,EAAKE,eAG5CgB,EAASS,GATO,2CAAH,qDAwBf,OACE,yBAAKnB,UAAU,OACb,6CACkB,IAAjBV,EAAM+B,QACL,4BAAQC,KAAK,SAASC,QAASV,EAAWW,SAAUb,GACjDA,EAAY,aAAe,cAG/BrB,EAAM+B,OAAS,GACd,oCACE,4BAAQC,KAAK,SAASC,QAtBV,WAClBb,EAAS,YAAIpB,GAAOmC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAEjB,MAAM8B,cAAcD,EAAE7B,aAqBrD,iBAGA,4BAAQyB,KAAK,SAASC,QArBT,WACnBb,EAAS,YAAIpB,GAAOmC,MAAK,SAACX,EAAGY,GAAJ,OAAUE,OAAOd,EAAEhB,WAAa8B,OAAOF,EAAE5B,iBAoB5D,kBAGA,4BAAQwB,KAAK,SAASC,QApBP,WACrBb,EAAS,YAAIpB,GAAOmC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAElB,KAAKD,KAAKgC,cAAcD,EAAE9B,KAAKD,YAmB9D,qBAKJ,kBAAC,EAAD,CAAUL,MAAOA,ODjDrB,MACAuC,SAASC,eAAe,U","file":"static/js/main.cecd791d.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <div>\n      {todos.map(todo => {\n        const {\n          id,\n          userId,\n          user: { name },\n          title,\n          completed,\n        } = todo;\n\n        return (\n          <div key={id} className=\"todo\">\n            <p className=\"todo__item\">\n              Task\n              {' '}\n              {id}\n            </p>\n            <p className=\"todo__item\">\n              UserID:\n              {' '}\n              {userId}\n            </p>\n            <p className=\"todo__item\">\n              User:\n              {' '}\n              {name}\n            </p>\n            <p className=\"todo__item\">\n              Task:\n              {' '}\n              {title}\n            </p>\n            <p className=\"todo__item\">\n              Completed:\n              {' '}\n              {completed ? '✔' : '❌'}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","const TODOS_API = 'https://jsonplaceholder.typicode.com/todos';\nconst USERS_API = 'https://jsonplaceholder.typicode.com/users';\n\nconst getData = <T>(url: string): Promise<T> => {\n  return fetch(url)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData(USERS_API);\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData(TODOS_API);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { TodoList } from './TodoList/TodoList';\nimport { getTodos, getUsers } from './Api/Api';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n    const [todosLoaded, users] = await Promise.all([getTodos(), getUsers()]);\n\n    const todosWithUsers = todosLoaded.map(todo => ({\n      ...todo,\n      user: users.find(user => user.id === todo.userId),\n    })) as Todo[];\n\n    setTodos(todosWithUsers);\n  };\n\n  const sortByTitle = () => {\n    setTodos([...todos].sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const sortByStatus = () => {\n    setTodos([...todos].sort((a, b) => Number(a.completed) - Number(b.completed)));\n  };\n\n  const sortByUserName = () => {\n    setTodos([...todos].sort((a, b) => a.user.name.localeCompare(b.user.name)));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      {todos.length === 0 && (\n        <button type=\"button\" onClick={loadTodos} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load Todos'}\n        </button>\n      )}\n      {todos.length > 0 && (\n        <>\n          <button type=\"button\" onClick={sortByTitle}>\n        Sort by title\n          </button>\n          <button type=\"button\" onClick={sortByStatus}>\n          Sort by Status\n          </button>\n          <button type=\"button\" onClick={sortByUserName}>\n          Sort by UserName\n          </button>\n        </>\n      )}\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n"],"sourceRoot":""}